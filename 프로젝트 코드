// 모티밋 카피앱
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ProjectCopyAppTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    Move()
                }
            }
        }
    }
}

class UriTypeConverter {
    @TypeConverter
    fun fromUri(uri: Uri?): String? {
        return uri?.toString()
    }

    @TypeConverter
    fun toUri(uriString: String?): Uri? {
        return uriString?.let { Uri.parse(it) }
    }
}


@OptIn(ExperimentalComposeUiApi::class, ExperimentalMaterial3Api::class)
@Composable
fun RecordEx(onSubmit: (ExerciseRecord) -> Unit, onSwitchScreen: () -> Unit) {
    var selectedEmotion by remember { mutableStateOf(Emotion.NORMAL) }
    var startTime by remember { mutableStateOf("") }
    var endTime by remember { mutableStateOf("") }
    var exerciseRecord by remember { mutableStateOf("") }
    val keyboardController = LocalSoftwareKeyboardController.current
    var selectedImageUri by remember { mutableStateOf<Uri?>(null) }
    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.PickVisualMedia(),
        onResult = { uri ->
            selectedImageUri = uri
        }
    )
    //DB 사용하기 위한 변수 선언
    val scope = rememberCoroutineScope()
    val context = LocalContext.current
    val db = remember {
        ExerciseDatabase.getDatabase(context)
    }

    // 위에 변수 선언한것들 위치 고민해보기

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .animateContentSize()
    ) {
        var month by remember { mutableStateOf(0) }
        var day by remember { mutableStateOf(0) }
        Button(
            onClick = {
                onSubmit(
                    ExerciseRecord(
                        month = month,
                        day = day,
                        emotion = selectedEmotion,
                        startTime = startTime,
                        endTime = endTime,
                        exerciseRecord = exerciseRecord,
                        selectedImageUri = selectedImageUri
                    )
                )
                val newExercise = ExerciseRecordEntity(
                    month = month, day = day, startTime = startTime,
                    endTime = endTime, exerciseRecord = exerciseRecord,
                    selectedImageUri = selectedImageUri, emotion = selectedEmotion.name
                )
                scope.launch(Dispatchers.IO) { db.exerciseDao().insertAll(newExercise) }
                onSwitchScreen()

            },
            modifier = Modifier
                .padding(16.dp)
                .align(Alignment.End)
        ) {
            Text(text = "완료")
        }

        Button(
            onClick = { onSwitchScreen() }, // 버튼 클릭 시 화면 전환
            modifier = Modifier
                .align(Alignment.Start)
                .padding(16.dp)
        ) {
            Text(text = "List 화면으로이동")
        }


        Text(
            text = "오늘 헬스장 미션 잘하셨나요?",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .padding(bottom = 16.dp)
                .align(Alignment.CenterHorizontally)
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Emotion.values().forEach { emotion ->
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .clickable {
                            selectedEmotion = emotion
                        }
                        .padding(8.dp)
                        .background(
                            color = if (selectedEmotion == emotion) Color.Gray else Color.Transparent,
                            shape = MaterialTheme.shapes.medium
                        )
                ) {
                    Image(
                        painter = painterResource(id = emotion.iconRes),
                        contentDescription = emotion.label,
                        modifier = Modifier.size(40.dp)
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = emotion.label,
                        fontSize = 10.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }

        Divider(color = Color.Black, thickness = 1.dp)
        Row(
            modifier = Modifier.fillMaxWidth()
        ) {
            // Start Time Input
            TextField(
                value = month.toString(),
                onValueChange = { month = it.toIntOrNull() ?: 0 },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number,
                    imeAction = ImeAction.Next
                ),
                keyboardActions = KeyboardActions(
                    onNext = { keyboardController?.hide() }
                ),
                placeholder = { Text("월 입력") },
                modifier = Modifier
                    .weight(1f)
                    .padding(end = 4.dp)
            )

            Spacer(modifier = Modifier.width(5.dp))

            TextField(
                value = day.toString(),
                onValueChange = { day = it.toIntOrNull() ?: 0 },
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number,
                    imeAction = ImeAction.Next
                ),
                keyboardActions = KeyboardActions(
                    onNext = { keyboardController?.hide() }
                ),
                placeholder = { Text("일 입력") },
                modifier = Modifier
                    .weight(1f)
                    .padding(start = 4.dp)
            )
        }

        Row(
            modifier = Modifier.fillMaxWidth()
        ) {
            // Start Time Input
            TextField(
                value = startTime,
                onValueChange = { startTime = it },
                keyboardOptions = KeyboardOptions.Default.copy(
                    imeAction = ImeAction.Next
                ),
                keyboardActions = KeyboardActions(
                    onNext = { keyboardController?.hide() }
                ),
                placeholder = { Text("시작 시간 입력") },
                modifier = Modifier
                    .weight(1f)
                    .padding(end = 4.dp)
            )

            Spacer(modifier = Modifier.width(5.dp))

            TextField(
                value = endTime,
                onValueChange = { endTime = it },
                keyboardOptions = KeyboardOptions.Default.copy(
                    imeAction = ImeAction.Next
                ),
                keyboardActions = KeyboardActions(
                    onNext = { keyboardController?.hide() }
                ),
                placeholder = { Text("종료 시간 입력") },
                modifier = Modifier
                    .weight(1f)
                    .padding(start = 4.dp)
            )
        }

        TextField(
            value = exerciseRecord,
            onValueChange = { exerciseRecord = it },
            keyboardOptions = KeyboardOptions.Default.copy(
                imeAction = ImeAction.Done
            ),
            keyboardActions = KeyboardActions(
                onDone = { keyboardController?.hide() }
            ),
            placeholder = { Text("운동 기록을 상세히 입력") },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
                .height(150.dp)
        )

        Button(
            onClick = {
                launcher.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly))
            }
        ) {
            Text(text = "갤러리에서 사진 불러오기")
        }
        selectedImageUri?.let { uri ->
            val context = LocalContext.current
            val bitmap = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                ImageDecoder.decodeBitmap(
                    ImageDecoder.createSource(context.contentResolver, uri)
                )
            } else {
                MediaStore.Images.Media.getBitmap(context.contentResolver, uri)
            }

            Image(
                bitmap = bitmap.asImageBitmap(),
                contentDescription = "",
                modifier = Modifier
                    .padding(8.dp)
            )
        }
    }
}


enum class Emotion(val label: String, val iconRes: Int) {
    FAIL("실패", R.drawable.fail),
    REGRET("아쉬움", R.drawable.regret),
    NORMAL("보통", R.drawable.normal),
    GOOD("좋음", R.drawable.good),
    EXCELLENT("최고", R.drawable.excellent)
}


// List 구성 컴포저블
@Composable
fun ListEx(
    records: List<ExerciseRecord>,
    onItemClick: (ExerciseRecord) -> Unit,
    onSwitchScreen: () -> Unit,
) {
    Column(
        modifier = Modifier.fillMaxSize()
    )
    {

        Button(
            onClick = { onSwitchScreen() }, // 버튼 클릭 시 화면 전환
            modifier = Modifier
                .padding(16.dp)

        ) {
            Text(text = "Record 화면으로 이동")
        }
        Spacer(modifier = Modifier.height(8.dp))
//        활용해야하는 코드
//        val context = LocalContext.current
//        val db = remember {
//            ExerciseDatabase.getDatabase(context)
//        }
//        val exerciseList by db.exerciseDao().getAll().collectAsState(initial = emptyList())
        LazyColumn(
            modifier = Modifier.weight(1f),
            contentPadding = PaddingValues(all = 8.dp)
        ) {
            items(records) { record ->
                ListExItem(record = record, onItemClick = onItemClick)
                Divider(color = Color.Black, thickness = 1.dp)
            }
        }
    }
}

//애니메이터 구현 컴포저블
@Composable
fun Move() {
    var currentScreen by remember { mutableStateOf(Screen.Record) }

    BoxWithConstraints(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        val exerciseRecords = remember { mutableStateListOf<ExerciseRecord>() }

        val screenWidth = maxWidth

        val transitionOffset = if (currentScreen == Screen.Record) {
            -screenWidth / 50
        } else {
            screenWidth / 50
        }

        Box(
            modifier = Modifier
                .fillMaxSize()
                .offset(x = transitionOffset)

        ) {
            when (currentScreen) {
                Screen.Record -> RecordEx(
                    onSubmit = { record ->

                        exerciseRecords.add(record) // 입력된 데이터를 리스트에 추가
                        currentScreen = Screen.List
                    },
                    onSwitchScreen = {
                        currentScreen = Screen.List
                    }
                )

                Screen.List -> ListEx(
                    records = exerciseRecords, // 빈 리스트를 사용하거나 실제 데이터 리스트를 전달하세요
                    onItemClick = {

                        currentScreen = Screen.Record
                    },
                    onSwitchScreen = {

                        currentScreen = Screen.Record
                    }
                )
            }
        }
    }
}

enum class Screen {
    Record, List
}

data class ExerciseRecord(
    val month: Int?,
    val day: Int?,
    val emotion: Emotion,
    val startTime: String?,
    val endTime: String?,
    val exerciseRecord: String?,
    val selectedImageUri: Uri?
)

@Composable
fun ListExItem(record: ExerciseRecord, onItemClick: (ExerciseRecord) -> Unit) {
    Column(
        modifier = Modifier
            .clickable { onItemClick(record) }
            .padding(16.dp)
    ) {
        // 상단 바 (월,일)
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
            ) {
                // 날짜 표시 (월/일)
                Text(
                    text = "${record.month}월 / ${record.day}일",
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp,
                    modifier = Modifier.align(Alignment.CenterHorizontally)
                )

                Divider(color = Color.Black, thickness = 2.dp)

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    // 감정 아이콘 표시
                    Image(
                        painter = painterResource(id = record.emotion.iconRes),
                        contentDescription = record.emotion.label,
                        modifier = Modifier
                            .size(64.dp)
                    )

                    Spacer(modifier = Modifier.width(16.dp))

                    // 운동 기록 세부사항 표시
                    Column(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalAlignment = Alignment.Start
                    ) {
                        Text(
                            text = "시작: ${record.startTime}시 - 종료: ${record.endTime}시",
                            fontWeight = FontWeight.Bold,
                            fontSize = 14.sp
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = record.exerciseRecord.toString(),
                            fontSize = 14.sp
                        )
                    }
                }
                record.selectedImageUri?.let { uri ->
                    val context = LocalContext.current
                    val bitmap = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                        ImageDecoder.decodeBitmap(
                            ImageDecoder.createSource(context.contentResolver, uri)
                        )
                    } else {
                        MediaStore.Images.Media.getBitmap(context.contentResolver, uri)
                    }

                    Image(
                        bitmap = bitmap.asImageBitmap(),
                        contentDescription = "",
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(100.dp) // Adjust the height as needed
                    )
                }
            }
        }
    }
}

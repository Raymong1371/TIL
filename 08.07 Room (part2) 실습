package com.example.roomprac2

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Face
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Phone
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.roomprac2.ui.theme.RoomPrac2Theme
import data.AppDatabase
import data.User
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            RoomPrac2Theme {
                MainActivityContent()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainActivityContent() {
    val context = LocalContext.current
    val db = remember {
        AppDatabase.getDatabase(context)
    }
    val userList by db.userDao().getAll().collectAsState(initial = emptyList())
    val scope = rememberCoroutineScope()


    var name: String by remember { mutableStateOf("") }
    var phone: String by remember { mutableStateOf("") }
    var email: String by remember { mutableStateOf("") }
    var age: Int by remember { mutableStateOf(0) }

    var savedName: String by remember { mutableStateOf("") }
    var savedPhone: String by remember { mutableStateOf("") }
    var savedEmail: String by remember { mutableStateOf("") }
    var savedAge: Int by remember { mutableStateOf(0) }


    fun onDeleteButtonClicked(userToDelete: User) {
        scope.launch(Dispatchers.IO) {
            db.userDao().delete(userToDelete)
        }
    }

    var editMode by remember { mutableStateOf(false) } //초기에는 false 로 시작 보기모드

    var editedName: String by remember { mutableStateOf("") }
    var editedPhone: String by remember { mutableStateOf("") }
    var editedEmail: String by remember { mutableStateOf("") }
    var editedAge: Int by remember { mutableStateOf(0) }

    fun onUpdateButtonClicked() {
        scope.launch(Dispatchers.IO) {
            val updatedUser = User(
                name = editedName,
                phone = editedPhone,
                email = editedEmail,
                age = editedAge
            )
            db.userDao().update(updatedUser)
            editMode = false // 보기 모드로 전환
        }
    }



    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        item {
            Text(
                text = " 개인정보를 입력하세요 ",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(16.dp)
            )

            TextField(
                value = name,
                onValueChange = { name = it },
                label = {
                    Row {
                        Icon(Icons.Filled.Person, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(" 이름 ")
                    }
                },
                placeholder = {
                    Text(
                        "이름을 입력하세요",
                        style = androidx.compose.ui.text.TextStyle(
                            fontSize = 16.sp,
                            color = Color.Gray
                        ),
                        modifier = Modifier.padding(8.dp)
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
                    .background(Color.White)
                    .border(1.dp, Color.Gray, RoundedCornerShape(4.dp))
            )

            TextField(
                value = phone,
                onValueChange = { phone = it },
                label = {
                    Row {
                        Icon(Icons.Filled.Phone, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(" 전화번호 ")
                    }
                },
                placeholder = {
                    Text(
                        "번호를 입력하세요",
                        style = androidx.compose.ui.text.TextStyle(
                            fontSize = 16.sp,
                            color = Color.Gray
                        ),
                        modifier = Modifier.padding(8.dp)
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
                    .background(Color.White)
                    .border(1.dp, Color.Gray, RoundedCornerShape(4.dp))
            )

            TextField(
                value = email,
                onValueChange = { email = it },
                label = {
                    Row {
                        Icon(Icons.Filled.Email, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(" 이메일 ")
                    }
                },
                placeholder = {
                    Text(
                        "메일을 입력하세요",
                        style = androidx.compose.ui.text.TextStyle(
                            fontSize = 16.sp,
                            color = Color.Gray
                        ),
                        modifier = Modifier.padding(8.dp)
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
                    .background(Color.White)
                    .border(1.dp, Color.Gray, RoundedCornerShape(4.dp))
            )
            TextField(
                value = age.toString(),
                onValueChange = { age = it.toIntOrNull() ?: 0 },
                label = {
                    Row {
                        Icon(Icons.Filled.Face, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(" 나이 ")
                    }
                },
                placeholder = {
                    Text(
                        "나이를 입력하세요",
                        style = androidx.compose.ui.text.TextStyle(
                            fontSize = 16.sp,
                            color = Color.Gray
                        ),
                        modifier = Modifier.padding(8.dp)
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
                    .background(Color.White)
                    .border(1.dp, Color.Gray, RoundedCornerShape(4.dp))
            )

            Spacer(modifier = Modifier.height(15.dp))

            Button(
                onClick = {
                    savedName = name
                    savedPhone = phone
                    savedEmail = email
                    savedAge = age
                    val newUser = User(name = name, phone = phone, email = email, age = age)
                    scope.launch(Dispatchers.IO) {
                        db.userDao().insertAll(newUser)
                    }
                },
                modifier = Modifier.padding(16.dp)
            ) {
                Text(text = "출력")
            }
        }
        items(userList) { user ->
            Card(
                modifier = Modifier
                    .padding(16.dp)
                    .background(Color.Green)
                    .clip(RoundedCornerShape(16.dp))
                    .shadow(4.dp)
            ) {
                if (editMode) {

                    TextField(
                        value = editedName,
                        onValueChange = { editedName = it },
                        label = { Text("이름") }
                    )

                    TextField(
                        value = editedPhone,
                        onValueChange = { editedPhone = it },
                        label = { Text("번호") }
                    )
                    TextField(
                        value = editedEmail,
                        onValueChange = { editedEmail = it },
                        label = { Text("메일") }
                    )
                    TextField(
                        value = editedAge.toString(),
                        onValueChange = { editedAge = it.toIntOrNull() ?: 0 },
                        label = { Text("나이") }
                    )


                    Button(
                        onClick = {
                            val updatedUser = user.copy(
                                name = editedName,
                                phone = editedPhone,
                                email = editedEmail,
                                age = editedAge
                            )
                            scope.launch(Dispatchers.IO) {
                                db.userDao().update(updatedUser)
                            }
                            editMode = false // 보기 모드로 전환
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp)
                    ) {
                        Text(text = "저장") //수정 버튼을 눌렀을때 아무 값도 입력이 되지않을시, 저장버튼을 눌러도 값이 변경되지 않게 하려면 추가해야되는 코드는?
                    }
                } else {
                    Row(modifier = Modifier.fillMaxWidth()) {

                        Image(
                            painter = painterResource(id = R.drawable.profile),
                            contentDescription = null,
                            modifier = Modifier.size(80.dp)
                        )
                        Column(
                            modifier = Modifier.padding(start = 16.dp)
                        ) {
                            Text(text = "이름: ${user.name}")
                            Text(text = "전화번호: ${user.phone}")
                            Text(text = "이메일: ${user.email}")
                            Text(text = "나이: ${user.age}")
                        }
                    }
                    Row {
                        Button(
                            onClick = { onDeleteButtonClicked(user) },
                            modifier = Modifier
                                .padding(8.dp)
                        ) {
                            Text(text = "삭제")
                        }
                        Button(
                            onClick = {
                                editMode = true // "수정" 버튼 클릭 시 편집 모드로 전환
                            },
                            modifier = Modifier
                                .padding(8.dp)
                        ) {
                            Text(text = "수정")
                        }
                    }

                }
            }

        }
    }
}



//@Preview(showBackground = true)
//@Composable
//fun mainActivityPreview() {
//    RoomPrac2Theme {
//        MainActivityContent()
//    }
//}

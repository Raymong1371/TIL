package com.example.mlkitprac

import android.net.Uri
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.LocalTextStyle
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.mlkitprac.ui.theme.MLKitPracTheme
import com.google.mlkit.common.model.DownloadConditions
import com.google.mlkit.nl.translate.TranslateLanguage
import com.google.mlkit.nl.translate.Translation
import com.google.mlkit.nl.translate.TranslatorOptions
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.korean.KoreanTextRecognizerOptions
import java.io.IOException


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MLKitPracTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    Practice()
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun Practice() {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier
            .padding(15.dp)
            .fillMaxSize()
    ) {
        var sentence: String by remember { mutableStateOf("") }
// MLKit 에 번역기능 추가하는 코드들 
        val enTranslator = remember {
            val options = TranslatorOptions.Builder()
                .setSourceLanguage(TranslateLanguage.KOREAN)
                .setTargetLanguage(TranslateLanguage.ENGLISH)
                .build()
            Translation.getClient(options)
        }
        var enabled by remember {
            mutableStateOf(false)
        }
        LaunchedEffect(Unit) {
            val conditions = DownloadConditions.Builder()
                .requireWifi()
                .build()
            enTranslator.downloadModelIfNeeded(conditions)
                .addOnSuccessListener {
                    enabled = true
                }
                .addOnFailureListener { exception ->

                }
        }
        var answer: String by remember { mutableStateOf("") }

        var selectedImageUri by remember {
            mutableStateOf<Uri?>(null)
        }
        val launcher = rememberLauncherForActivityResult(
            contract = ActivityResultContracts.GetContent(),
            onResult = { uri ->
                selectedImageUri = uri
            }
        )
        val context = LocalContext.current
        val recognizer =
            TextRecognition.getClient(KoreanTextRecognizerOptions.Builder().build())

        var translatedText by remember { mutableStateOf("") }
        var extractedText by remember { mutableStateOf("") }
        var image: InputImage? = null
        try {                                             //image에서 텍스트를 추출하는 코드
            selectedImageUri?.let { uri ->
                image = InputImage.fromFilePath(context, uri) // image 변수에 InputImage 할당
                recognizer.process(image!!) // image 변수를 사용하여 텍스트 추출
                    .addOnSuccessListener { visionText ->
                        extractedText = visionText.text
                        enTranslator.translate(extractedText)
                            .addOnSuccessListener { translated ->
                                translatedText = translated
                            }
                            .addOnFailureListener { e ->
                                e.printStackTrace()
                            }
                    }
                    .addOnFailureListener { e ->
                        e.printStackTrace()
                    }
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }

        TextField(
            value = sentence,
            onValueChange = { sentence = it },
            modifier = Modifier
                .width(500.dp)
                .height(300.dp),
            label = { Text(text = "문장을 입력하세요", color = Color.White) },
            textStyle = LocalTextStyle.current.copy(
                fontSize = 35.sp,
                color = Color.White
            ),
            shape = RoundedCornerShape(8.dp),
            colors = TextFieldDefaults.textFieldColors(containerColor = Color.Blue)
        )
        Spacer(modifier = Modifier.height(15.dp))

        Row {
            Button(
                onClick = {
//                answer = sentence
                    enTranslator.translate(sentence)
                        .addOnSuccessListener { traslatedText ->
                            answer = traslatedText

                        }
                },
                shape = RectangleShape,
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Black,
                    contentColor = Color.White
                ),
                enabled = enabled
            ) {
                Text(text = "번역")
            }
            Spacer(modifier = Modifier.width(15.dp))

            Button(
                onClick = {
                    launcher.launch("image/*")
                },
                shape = RectangleShape,
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Black,
                    contentColor = Color.White
                ),
            ) {
                Text(text = "이미지 가져오기")
            }
        }

        Spacer(modifier = Modifier.height(15.dp))

        TextField(
            value = answer,
            onValueChange = { answer = it },
            modifier = Modifier
                .width(500.dp)
                .height(150.dp)
                .border(width = 1.dp, color = Color.Black, shape = RoundedCornerShape(8.dp)),
            textStyle = LocalTextStyle.current.copy(
                fontSize = 25.sp,
                color = Color.Black
            ),
            colors = TextFieldDefaults.textFieldColors(containerColor = Color.White)
        )
        Spacer(modifier = Modifier.height(15.dp))


        Text(text = "추출된 텍스트: $extractedText")

        Text(text = "번역된 텍스트: $translatedText")


    }
}

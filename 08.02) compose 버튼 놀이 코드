package com.example.countup

import android.app.Activity
import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.platform.LocalContext
import com.example.countup.ui.theme.CountUpTheme
import androidx.compose.ui.unit.sp
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.TimeZone


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CountUpTheme {
                ClickCounterApp()
            }
        }
    }
}

@Composable
fun ClickCounterApp() {
    val context = LocalContext.current as? Activity
    val sharedPref = context?.getPreferences(Context.MODE_PRIVATE)
    var clickCount by remember {
        val countValue = sharedPref?.getInt("click_count", 0) ?: 0     // clickCount 변수에 쉐어드프레퍼런스 를 활용해서 값을 저장하도록 하게하는 코드
        mutableStateOf(countValue)
    }
    var lastClickTime by remember {
        val countValue = sharedPref?.getString("last_click_time", "") ?: ""    // 마찬가지로 시간을 저장하려고 만든 코드
        mutableStateOf(countValue)
    }

    Surface(color = MaterialTheme.colorScheme.background) {

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
        Box(
            modifier = Modifier
                .background(Color.Green)
                .padding(16.dp),
            contentAlignment = Alignment.Center

        ) {
            Text(
                text = "재미있는 버튼 놀이",
                color = Color.Black,
                fontSize = 24.sp
            )
        }


            Spacer(modifier = Modifier.height(30.dp))

            Text(
                text = "클릭 횟수: $clickCount",
                color = Color.Black
            )

            Spacer(modifier = Modifier.height(30.dp))
            Row {
                Button(
                    onClick = {
                        clickCount++
                        sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                    },
                    modifier = Modifier.padding(8.dp)
                ) {
                    Text(
                        "클릭 증가",
                        style = MaterialTheme.typography.titleLarge.copy(color = Color.Green)
                    )
                }
                Button(
                    onClick = {
                        clickCount--
                        sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                    },
                    modi록
                }
            ) {
                Text("타임스탬프",
                    style = MaterialTheme.typography.titleLarge.copy(color = Color.White)
                )
            }
            Spacer(modifier = Modifier.height(30.dp))
            Text(
                text = "마지막으로 클릭한 시간:  $lastClickTime",
                color = Color.Black,
                fontSize = 18.sp
            )
        }
    }
}



@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    CountUpTheme {
        ClickCounterApp()
    }
}

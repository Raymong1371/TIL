package com.example.countup

import android.app.Activity
import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import com.example.countup.ui.theme.CountUpTheme
import androidx.compose.ui.unit.sp
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.TimeZone


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CountUpTheme {
                ClickCounterApp()
            }
        }
    }
}

@Composable
fun ClickCounterApp() {
    val context = LocalContext.current as? Activity
    val sharedPref = context?.getPreferences(Context.MODE_PRIVATE)
    var clickCount by remember {
        val countValue = sharedPref?.getInt("click_count", 0) ?: 0
        mutableStateOf(countValue)
    }
    var lastClickTime by remember {
        val countValue = sharedPref?.getString("last_click_time", "") ?: ""
        mutableStateOf(countValue)
    }

    Surface(color = MaterialTheme.colorScheme.background) {
        Box(
            modifier = Modifier.fillMaxSize()
        ) {
            val imageResource: Painter = painterResource(id = R.drawable.picture)

            Image(
                painter = imageResource,
                contentDescription = null,
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                contentScale = ContentScale.FillBounds
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Box(
                    modifier = Modifier
                        .background(Color.Green)
                        .padding(16.dp),
                    contentAlignment = Alignment.Center

                ) {
                    Text(
                        text = "재미있는 버튼 놀이",
                        color = Color.Black,
                        fontSize = 24.sp
                    )
                }


                Spacer(modifier = Modifier.height(30.dp))
                Box(
                    modifier = Modifier
                        .background(Color.White)
                        .padding(9.dp)
                ) {

                Text(
                    text = "클릭 횟수: $clickCount",
                    color = Color.Black
                )
                        }

                Spacer(modifier = Modifier.height(30.dp))
                Row {
                    Button(
                        onClick = {
                            clickCount++
                            sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                        },
                        modifier = Modifier.padding(8.dp)
                    ) {
                        Text(
                            "클릭 증가",
                            style = MaterialTheme.typography.titleLarge.copy(color = Color.Green)
                        )
                    }
                    Button(
                        onClick = {
                            clickCount--
                            sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                        },
                        modifier = Modifier.padding(8.dp)
                    ) {
                        Text(
                            "클릭 감소",
                            style = MaterialTheme.typography.titleLarge.copy(color = Color.Cyan)
                        )
                    }
                }
                Spacer(modifier = Modifier.height(30.dp))

                Row {
                    Button(
                        onClick = {
                            clickCount *= 2
                            sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                        },
                        modifier = Modifier.padding(8.dp)
                    ) {
                        Text(
                            "클릭 2배",
                            style = MaterialTheme.typography.titleLarge.copy(color = Color.Gray)
                        )
                    }
                    Button(
                        onClick = {
                            clickCount /= 2
                            sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                        },
                        modifier = Modifier.padding(8.dp)
                    ) {
                        Text(
                            "클릭 반으로",
                            style = MaterialTheme.typography.titleLarge.copy(color = Color.Red)
                        )
                    }
                }
                Spacer(modifier = Modifier.height(30.dp))
                Button(
                    onClick = {
                        clickCount = 0
                        sharedPref?.edit()?.putInt("click_count", clickCount)?.apply()
                    }
                ) {
                    Text(
                        "클릭 횟수 초기화",
                        style = MaterialTheme.typography.titleLarge.copy(color = Color.Yellow)
                    )
                }
                Spacer(modifier = Modifier.height(15.dp))
                Button(
                    onClick = {
                        val timeZone = TimeZone.getTimeZone("Asia/Seoul")
                        val timeDifference = timeZone.rawOffset / (1000 * 60 * 60)
                        val currentTime = Date().time + timeDifference * (1000 * 60 * 60)
                        val localTime: Long =
                            currentTime - (TimeZone.getDefault().rawOffset / 1000) + 24 * 60 * 60 * 1000
                        lastClickTime =
                            SimpleDateFormat(
                                "HH:mm:ss",
                                Locale.getDefault()
                            ).format(Date(localTime))
                        sharedPref?.edit()?.putString("last_click_time", lastClickTime)?.apply()
                    }
                ) {
                    Text(
                        "타임스탬프",
                        style = MaterialTheme.typography.titleLarge.copy(color = Color.White)
                    )
                }
                Spacer(modifier = Modifier.height(30.dp))
                Box(
                    modifier = Modifier
                        .background(Color.White)
                        .padding(9.dp)
                ) {
                    Text(
                        text = "마지막으로 클릭한 시간:  $lastClickTime",
                        color = Color.Black,
                        fontSize = 18.sp
                    )
                }
            }
        }
    }
}



@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    CountUpTheme {
        ClickCounterApp()
    }
}
